import { describe, it, expect, beforeAll, afterAll, beforeEach } from '@jest/globals';
import { payload } from 'payload';
import { MongoMemoryServer } from 'mongodb-memory-server';

let mongoServer: MongoMemoryServer;

describe('Collections Integration Tests', () => {
  beforeAll(async () => {
    // Start in-memory MongoDB
    mongoServer = await MongoMemoryServer.create();
    const mongoUri = mongoServer.getUri();
    
    // Initialize PayloadCMS with test database
    await payload.init({
      secret: 'test-secret',
      mongoURL: mongoUri,
      local: true,
    });
  });

  afterAll(async () => {
    await payload.destroy();
    await mongoServer.stop();
  });

  beforeEach(async () => {
    // Clear all collections before each test
    const collections = ['users', 'rawContents', 'posts', 'pages', 'products', 'services', 'images', 'feeds', 'scrapeSources', 'aiPrompts', 'categories', 'tags'];
    
    for (const collection of collections) {
      try {
        await payload.delete({
          collection,
          where: {},
        });
      } catch (error) {
        // Collection might not exist yet
      }
    }
  });

  describe('Users Collection', () => {
    it('should create a user successfully', async () => {
      const userData = {
        email: 'test@example.com',
        password: 'password123',
        name: 'Test User',
        role: 'admin',
      };

      const user = await payload.create({
        collection: 'users',
        data: userData,
      });

      expect(user).toBeDefined();
      expect(user.email).toBe(userData.email);
      expect(user.name).toBe(userData.name);
      expect(user.role).toBe(userData.role);
    });

    it('should validate required fields', async () => {
      const userData = {
        email: 'test@example.com',
        // Missing password and name
      };

      await expect(
        payload.create({
          collection: 'users',
          data: userData,
        })
      ).rejects.toThrow();
    });
  });

  describe('RawContents Collection', () => {
    it('should create raw content successfully', async () => {
      const contentData = {
        title: 'Test Raw Content',
        content: 'This is test content',
        source: 'AI',
        status: 'draft',
        reviewed: false,
        autoGenerated: true,
        createdByAI: true,
      };

      const content = await payload.create({
        collection: 'rawContents',
        data: contentData,
      });

      expect(content).toBeDefined();
      expect(content.title).toBe(contentData.title);
      expect(content.source).toBe(contentData.source);
      expect(content.status).toBe(contentData.status);
    });

    it('should handle AI provider field correctly', async () => {
      const contentData = {
        title: 'AI Generated Content',
        content: 'AI generated content',
        source: 'AI',
        aiProvider: 'openai',
        status: 'draft',
      };

      const content = await payload.create({
        collection: 'rawContents',
        data: contentData,
      });

      expect(content.aiProvider).toBe('openai');
    });
  });

  describe('Posts Collection', () => {
    it('should create post with auto-generated slug', async () => {
      const postData = {
        title: 'Test Post Title',
        content: 'This is test post content',
        status: 'draft',
        author: 'test-user-id', // You might need to create a user first
      };

      const post = await payload.create({
        collection: 'posts',
        data: postData,
      });

      expect(post).toBeDefined();
      expect(post.title).toBe(postData.title);
      expect(post.slug).toBe('test-post-title');
    });

    it('should handle SEO fields correctly', async () => {
      const postData = {
        title: 'SEO Test Post',
        content: 'SEO test content',
        status: 'draft',
        seo: {
          metaTitle: 'Custom SEO Title',
          metaDescription: 'Custom SEO description',
          metaKeywords: 'test, seo, keywords',
        },
      };

      const post = await payload.create({
        collection: 'posts',
        data: postData,
      });

      expect(post.seo.metaTitle).toBe('Custom SEO Title');
      expect(post.seo.metaDescription).toBe('Custom SEO description');
    });
  });

  describe('Products Collection', () => {
    it('should create product with SKU generation', async () => {
      const productData = {
        name: 'Test Product',
        description: 'Test product description',
        price: 99.99,
        currency: 'USD',
        status: 'active',
        category: 'test-category-id', // You might need to create a category first
      };

      const product = await payload.create({
        collection: 'products',
        data: productData,
      });

      expect(product).toBeDefined();
      expect(product.name).toBe(productData.name);
      expect(product.sku).toBeDefined();
      expect(product.sku).toMatch(/^TESTPROD\d{4}$/);
    });

    it('should handle product images correctly', async () => {
      const productData = {
        name: 'Product with Images',
        description: 'Product with multiple images',
        price: 149.99,
        currency: 'USD',
        status: 'active',
        images: [
          {
            image: 'test-image-id', // You might need to create an image first
            alt: 'Primary image',
            isPrimary: true,
          },
        ],
      };

      const product = await payload.create({
        collection: 'products',
        data: productData,
      });

      expect(product.images).toHaveLength(1);
      expect(product.images[0].isPrimary).toBe(true);
    });
  });

  describe('Services Collection', () => {
    it('should create service with location data', async () => {
      const serviceData = {
        name: 'Web Development Service',
        description: 'Professional web development services',
        price: 1000,
        priceType: 'fixed',
        currency: 'USD',
        status: 'active',
        location: {
          city: 'New York',
          state: 'NY',
          country: 'USA',
          isRemote: true,
        },
      };

      const service = await payload.create({
        collection: 'services',
        data: serviceData,
      });

      expect(service).toBeDefined();
      expect(service.name).toBe(serviceData.name);
      expect(service.location.city).toBe('New York');
      expect(service.location.isRemote).toBe(true);
    });
  });

  describe('Images Collection', () => {
    it('should create image with provider data', async () => {
      const imageData = {
        alt: 'Test Image',
        provider: 'unsplash',
        providerId: 'unsplash-123',
        providerUrl: 'https://unsplash.com/photos/123',
        isPublic: true,
      };

      const image = await payload.create({
        collection: 'images',
        data: imageData,
      });

      expect(image).toBeDefined();
      expect(image.alt).toBe(imageData.alt);
      expect(image.provider).toBe('unsplash');
      expect(image.providerId).toBe('unsplash-123');
    });
  });

  describe('Feeds Collection', () => {
    it('should create RSS feed successfully', async () => {
      const feedData = {
        name: 'Tech News Feed',
        url: 'https://example.com/feed.xml',
        description: 'Technology news RSS feed',
        category: 'technology',
        active: true,
        fetchInterval: 3600,
        maxItems: 10,
      };

      const feed = await payload.create({
        collection: 'feeds',
        data: feedData,
      });

      expect(feed).toBeDefined();
      expect(feed.name).toBe(feedData.name);
      expect(feed.url).toBe(feedData.url);
      expect(feed.active).toBe(true);
    });
  });

  describe('AiPrompts Collection', () => {
    it('should create AI prompt with variables', async () => {
      const promptData = {
        title: 'Article Generator',
        description: 'Generate articles using AI',
        prompt: 'Write an article about {topic} in {tone} tone',
        type: 'article',
        provider: 'openai',
        model: 'gpt-3.5-turbo',
        active: true,
        variables: {
          topic: 'Technology',
          tone: 'professional',
          length: 'medium',
          language: 'English',
        },
        maxTokens: 1000,
        temperature: 0.7,
      };

      const prompt = await payload.create({
        collection: 'aiPrompts',
        data: promptData,
      });

      expect(prompt).toBeDefined();
      expect(prompt.title).toBe(promptData.title);
      expect(prompt.type).toBe('article');
      expect(prompt.provider).toBe('openai');
      expect(prompt.variables.topic).toBe('Technology');
    });
  });

  describe('Categories Collection', () => {
    it('should create category with hierarchical structure', async () => {
      // Create parent category
      const parentCategory = await payload.create({
        collection: 'categories',
        data: {
          name: 'Technology',
          slug: 'technology',
          description: 'Technology category',
        },
      });

      // Create child category
      const childCategory = await payload.create({
        collection: 'categories',
        data: {
          name: 'Web Development',
          slug: 'web-development',
          description: 'Web development subcategory',
          parent: parentCategory.id,
        },
      });

      expect(childCategory.parent).toBe(parentCategory.id);
    });
  });

  describe('Tags Collection', () => {
    it('should create tag and track usage', async () => {
      const tagData = {
        name: 'JavaScript',
        slug: 'javascript',
        description: 'JavaScript programming language',
        color: '#f7df1e',
        isActive: true,
      };

      const tag = await payload.create({
        collection: 'tags',
        data: tagData,
      });

      expect(tag).toBeDefined();
      expect(tag.name).toBe(tagData.name);
      expect(tag.usageCount).toBe(0);
      expect(tag.isActive).toBe(true);
    });
  });

  describe('ScrapeSources Collection', () => {
    it('should create scrape source with configuration', async () => {
      const sourceData = {
        name: 'Tech Blog Scraper',
        url: 'https://techblog.example.com',
        description: 'Scrape technology blog content',
        type: 'blog',
        platform: 'other',
        active: true,
        keywords: [
          {
            keyword: 'artificial intelligence',
            priority: 'high',
          },
          {
            keyword: 'machine learning',
            priority: 'medium',
          },
        ],
        scrapingConfig: {
          selectors: {
            title: 'h1.title',
            content: 'div.content',
            author: 'span.author',
          },
          waitTime: 2000,
          maxPages: 5,
        },
      };

      const source = await payload.create({
        collection: 'scrapeSources',
        data: sourceData,
      });

      expect(source).toBeDefined();
      expect(source.name).toBe(sourceData.name);
      expect(source.keywords).toHaveLength(2);
      expect(source.scrapingConfig.selectors.title).toBe('h1.title');
    });
  });
});