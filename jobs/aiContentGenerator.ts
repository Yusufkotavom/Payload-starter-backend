import { payload } from 'payload';
import openaiService from '../src/services/openaiService';

export default async function aiContentGenerator() {
  try {
    console.log('ü§ñ Starting AI content generator...');
    
    // Get active AI prompts
    const prompts = await payload.find({
      collection: 'aiPrompts',
      where: {
        active: {
          equals: true,
        },
      },
    });

    console.log(`üß† Found ${prompts.docs.length} active prompts`);

    for (const prompt of prompts.docs) {
      try {
        console.log(`üìù Processing prompt: ${prompt.title}`);
        
        // Generate content using AI
        const aiResponse = await openaiService.generateContent(prompt.prompt, {
          model: prompt.model || 'gpt-3.5-turbo',
          maxTokens: prompt.maxTokens || 1000,
          temperature: prompt.temperature || 0.7,
          systemPrompt: 'You are a professional content writer who creates engaging and informative content.',
        });

        if (!aiResponse.success) {
          console.error(`‚ùå AI generation failed for prompt ${prompt.title}:`, aiResponse.error);
          continue;
        }

        const generatedContent = aiResponse.content;

        if (generatedContent) {
          // Create raw content
          const rawContent = await payload.create({
            collection: 'rawContents',
            data: {
              title: `AI Generated: ${prompt.title}`,
              content: generatedContent,
              excerpt: generatedContent.substring(0, 200) + '...',
              source: 'AI',
              aiProvider: prompt.provider,
              status: 'draft',
              reviewed: false,
              autoGenerated: true,
              createdByAI: true,
              metadata: {
                promptId: prompt.id,
                promptTitle: prompt.title,
                promptType: prompt.type,
                aiModel: prompt.model,
                maxTokens: prompt.maxTokens,
                temperature: prompt.temperature,
                usage: aiResponse.usage,
                model: aiResponse.model,
              },
              tags: prompt.tags || [],
              categories: prompt.categories || [],
              aiPrompt: prompt.id,
            },
          });
          
          console.log(`‚úÖ Generated content for prompt: ${prompt.title}`);
          
          // Update prompt usage stats
          await payload.update({
            collection: 'aiPrompts',
            id: prompt.id,
            data: {
              usageCount: (prompt.usageCount || 0) + 1,
              lastUsedAt: new Date().toISOString(),
            },
          });
        }
      } catch (promptError) {
        console.error(`‚ùå Error generating content for prompt ${prompt.title}:`, promptError);
      }
    }
    
    console.log('‚úÖ AI content generator completed');
  } catch (error) {
    console.error('‚ùå AI content generator error:', error);
  }
}

// Alternative function for generating specific types of content
export async function generateArticleContent(topic: string, options: {
  tone?: 'professional' | 'casual' | 'friendly' | 'formal';
  length?: 'short' | 'medium' | 'long';
  language?: string;
} = {}) {
  try {
    console.log(`üìù Generating article about: ${topic}`);
    
    const aiResponse = await openaiService.generateArticle(topic, options);
    
    if (!aiResponse.success) {
      console.error(`‚ùå Article generation failed:`, aiResponse.error);
      return null;
    }

    // Create raw content
    const rawContent = await payload.create({
      collection: 'rawContents',
      data: {
        title: `Article: ${topic}`,
        content: aiResponse.content,
        excerpt: aiResponse.content.substring(0, 200) + '...',
        source: 'AI',
        aiProvider: 'openai',
        status: 'draft',
        reviewed: false,
        autoGenerated: true,
        createdByAI: true,
        metadata: {
          topic,
          tone: options.tone,
          length: options.length,
          language: options.language,
          usage: aiResponse.usage,
          model: aiResponse.model,
        },
      },
    });
    
    console.log(`‚úÖ Generated article: ${rawContent.title}`);
    return rawContent;
  } catch (error) {
    console.error('‚ùå Article generation error:', error);
    return null;
  }
}

// Function for generating product descriptions
export async function generateProductDescription(productName: string, features: string[], options: {
  tone?: 'professional' | 'casual' | 'friendly';
  language?: string;
} = {}) {
  try {
    console.log(`üìù Generating product description for: ${productName}`);
    
    const aiResponse = await openaiService.generateProductDescription(productName, features, options);
    
    if (!aiResponse.success) {
      console.error(`‚ùå Product description generation failed:`, aiResponse.error);
      return null;
    }

    // Create raw content
    const rawContent = await payload.create({
      collection: 'rawContents',
      data: {
        title: `Product Description: ${productName}`,
        content: aiResponse.content,
        excerpt: aiResponse.content.substring(0, 200) + '...',
        source: 'AI',
        aiProvider: 'openai',
        status: 'draft',
        reviewed: false,
        autoGenerated: true,
        createdByAI: true,
        metadata: {
          productName,
          features,
          tone: options.tone,
          language: options.language,
          usage: aiResponse.usage,
          model: aiResponse.model,
        },
      },
    });
    
    console.log(`‚úÖ Generated product description: ${rawContent.title}`);
    return rawContent;
  } catch (error) {
    console.error('‚ùå Product description generation error:', error);
    return null;
  }
}