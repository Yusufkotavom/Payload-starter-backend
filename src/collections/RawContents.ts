import { CollectionConfig } from 'payload/types';

export const RawContents: CollectionConfig = {
  slug: 'rawContents',
  admin: {
    useAsTitle: 'title',
    defaultColumns: ['title', 'source', 'status', 'reviewed', 'createdAt'],
  },
  access: {
    read: () => true,
    create: () => true,
    update: () => true,
    delete: () => true,
  },
  fields: [
    {
      name: 'title',
      type: 'text',
      required: true,
    },
    {
      name: 'content',
      type: 'richText',
      required: true,
    },
    {
      name: 'excerpt',
      type: 'textarea',
      maxLength: 200,
    },
    {
      name: 'source',
      type: 'select',
      options: [
        {
          label: 'AI Generated',
          value: 'AI',
        },
        {
          label: 'RSS Feed',
          value: 'RSS',
        },
        {
          label: 'Web Scraper',
          value: 'Scraper',
        },
      ],
      required: true,
    },
    {
      name: 'aiProvider',
      type: 'select',
      options: [
        {
          label: 'OpenAI',
          value: 'openai',
        },
        {
          label: 'Gemini',
          value: 'gemini',
        },
        {
          label: 'Claude',
          value: 'claude',
        },
        {
          label: 'Ollama',
          value: 'ollama',
        },
      ],
      admin: {
        condition: (data) => data.source === 'AI',
      },
    },
    {
      name: 'status',
      type: 'select',
      options: [
        {
          label: 'Draft',
          value: 'draft',
        },
        {
          label: 'Published',
          value: 'published',
        },
        {
          label: 'Deleted',
          value: 'deleted',
        },
      ],
      defaultValue: 'draft',
      required: true,
    },
    {
      name: 'reviewed',
      type: 'checkbox',
      defaultValue: false,
    },
    {
      name: 'autoGenerated',
      type: 'checkbox',
      defaultValue: true,
    },
    {
      name: 'createdByAI',
      type: 'checkbox',
      defaultValue: false,
    },
    {
      name: 'featuredImage',
      type: 'upload',
      relationTo: 'images',
    },
    {
      name: 'tags',
      type: 'relationship',
      relationTo: 'tags',
      hasMany: true,
    },
    {
      name: 'categories',
      type: 'relationship',
      relationTo: 'categories',
      hasMany: true,
    },
    {
      name: 'author',
      type: 'relationship',
      relationTo: 'users',
    },
    {
      name: 'originalUrl',
      type: 'text',
      admin: {
        description: 'Original URL if content was scraped from web',
      },
    },
    {
      name: 'aiPrompt',
      type: 'relationship',
      relationTo: 'aiPrompts',
      admin: {
        condition: (data) => data.source === 'AI',
      },
    },
    {
      name: 'metadata',
      type: 'json',
      admin: {
        description: 'Additional metadata (AI response, RSS data, etc.)',
      },
    },
  ],
  timestamps: true,
};